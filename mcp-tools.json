[
  {
    "annotations": {
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "[Preview] Discover referrers of a manifest in a registry or an OCI image layout\n\n** This command is in preview and under development. **\n\nExample - Discover referrers of manifest 'hello:v1' in registry 'localhost:5000', displayed in a tree view:\n  oras discover localhost:5000/hello:v1\n\nExample - Discover referrers via referrers API:\n  oras discover --distribution-spec v1.1-referrers-api localhost:5000/hello:v1\n\nExample - Discover referrers via tag scheme:\n  oras discover --distribution-spec v1.1-referrers-tag localhost:5000/hello:v1\n\nExample - [Experimental] Discover referrers and display in a table view:\n  oras discover localhost:5000/hello:v1 --format table\n\nExample - [Experimental] Discover referrers and format output with Go template:\n  oras discover localhost:5000/hello:v1 --format go-template --template \"{{.referrers}}\"\n\nExample - [Experimental] Discover only direct referrers, displayed in json view:\n  oras discover localhost:5000/hello:v1 --format json --depth 1\n\nExample - Discover referrers with type 'test-artifact' of manifest 'hello:v1' in registry 'localhost:5000':\n  oras discover --artifact-type test-artifact localhost:5000/hello:v1\n\nExample - Discover referrers of the manifest tagged 'v1' in an OCI image layout folder 'layout-dir':\n  oras discover --oci-layout layout-dir:v1\n\nExample - Discover referrers of the manifest tagged 'example.com:v1' in an OCI image layout folder 'layout-dir':\n  oras discover example.com:v1 --oci-layout-path layout-dir\n",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "description": "Positional arguments\nUsage: [flags] \u003cname\u003e{:\u003ctag\u003e|@\u003cdigest\u003e}",
          "type": "string"
        },
        "flags": {
          "description": "Flag options",
          "properties": {
            "artifact-type": {
              "description": "artifact type",
              "type": "string"
            },
            "ca-file": {
              "description": "server certificate authority file for the remote registry",
              "type": "string"
            },
            "cert-file": {
              "description": "client certificate file for the remote registry",
              "type": "string"
            },
            "debug": {
              "description": "output debug logs (implies --no-tty)",
              "type": "boolean"
            },
            "depth": {
              "description": "[Experimental] level of referrers to display, if unused shows referrers of all levels",
              "type": "integer"
            },
            "distribution-spec": {
              "description": "[Preview] set OCI distribution spec version and API option for target. Options: v1.1-referrers-tag, v1.1-referrers-api",
              "type": "string"
            },
            "format": {
              "description": "[Experimental] format output using a custom template:\n'table':        [Deprecated] Get referrers and output in table format\n'json':         Get referrers and output in JSON format\n'go-template':  Print referrers using the given Go template\n'tree':         Get referrers and print in tree format",
              "type": "string"
            },
            "header": {
              "description": "add custom headers to requests",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "identity-token": {
              "description": "registry identity token",
              "type": "string"
            },
            "identity-token-stdin": {
              "description": "read identity token from stdin",
              "type": "boolean"
            },
            "insecure": {
              "description": "allow connections to SSL registry without certs",
              "type": "boolean"
            },
            "key-file": {
              "description": "client private key file for the remote registry",
              "type": "string"
            },
            "no-tty": {
              "description": "[Preview] disable colors",
              "type": "boolean"
            },
            "oci-layout": {
              "description": "set target as an OCI image layout",
              "type": "boolean"
            },
            "oci-layout-path": {
              "description": "[Experimental] set the path for the OCI image layout target",
              "type": "string"
            },
            "output": {
              "description": "[Deprecated] format in which to display referrers (table, json, or tree).",
              "type": "string"
            },
            "password": {
              "description": "registry password or identity token",
              "type": "string"
            },
            "password-stdin": {
              "description": "read password from stdin",
              "type": "boolean"
            },
            "plain-http": {
              "description": "allow insecure connections to registry without SSL check",
              "type": "boolean"
            },
            "platform": {
              "description": "request platform in the form of `os[/arch][/variant][:os_version]`",
              "type": "string"
            },
            "registry-config": {
              "description": "`path` of the authentication file for registry",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "resolve": {
              "description": "customized DNS for registry, formatted in `host:port:address[:address_port]`",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "template": {
              "description": "[Experimental] template string used to format output",
              "type": "string"
            },
            "username": {
              "description": "registry username",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "flags",
        "args"
      ]
    },
    "name": "oras_discover"
  },
  {
    "annotations": {
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Pull files from a registry or an OCI image layout\n\nExample - Pull artifact files from a registry:\n  oras pull localhost:5000/hello:v1\n\nExample - Recursively pulling all files from a registry, including subjects of hello:v1:\n  oras pull --include-subject localhost:5000/hello:v1\n\nExample - Pull files from an insecure registry:\n  oras pull --insecure localhost:5000/hello:v1\n\nExample - Pull files from the HTTP registry:\n  oras pull --plain-http localhost:5000/hello:v1\n\nExample - Pull files from a registry with local cache:\n  export ORAS_CACHE=~/.oras/cache\n  oras pull localhost:5000/hello:v1\n\nExample - Pull files from a registry with certain platform:\n  oras pull --platform linux/arm/v5 localhost:5000/hello:v1\n\nExample - Pull all files with concurrency level tuned:\n  oras pull --concurrency 6 localhost:5000/hello:v1\n\nExample - [Experimental] Pull files and format output in JSON:\n  oras pull localhost:5000/hello:v1 --format json\n\nExample - [Experimental] Pull files and format output with Go template:\n  oras pull localhost:5000/hello:v1 --format go-template=\"{{.reference}}\"\n\nExample - Pull artifact files from an OCI image layout folder 'layout-dir':\n  oras pull --oci-layout layout-dir:v1\n\nExample - Pull artifact files from an OCI layout archive 'layout.tar':\n  oras pull --oci-layout layout.tar:v1\n\nExample - Pull artifact files tagged 'example.com:v1' from an OCI image layout folder 'layout-dir':\n  oras pull example.com:v1 --oci-layout-path layout-dir\n",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "description": "Positional arguments\nUsage: [flags] \u003cname\u003e{:\u003ctag\u003e|@\u003cdigest\u003e}",
          "type": "string"
        },
        "flags": {
          "description": "Flag options",
          "properties": {
            "allow-path-traversal": {
              "description": "allow storing files out of the output directory",
              "type": "boolean"
            },
            "ca-file": {
              "description": "server certificate authority file for the remote registry",
              "type": "string"
            },
            "cert-file": {
              "description": "client certificate file for the remote registry",
              "type": "string"
            },
            "concurrency": {
              "description": "concurrency level",
              "type": "integer"
            },
            "config": {
              "description": "output manifest config file",
              "type": "string"
            },
            "debug": {
              "description": "output debug logs (implies --no-tty)",
              "type": "boolean"
            },
            "format": {
              "description": "[Experimental] format output using a custom template:\n'json':         Print in JSON format\n'go-template':  Print output using the given Go template\n'text':         Print in text format",
              "type": "string"
            },
            "header": {
              "description": "add custom headers to requests",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "identity-token": {
              "description": "registry identity token",
              "type": "string"
            },
            "identity-token-stdin": {
              "description": "read identity token from stdin",
              "type": "boolean"
            },
            "include-subject": {
              "description": "recursively pull the subject of artifacts",
              "type": "boolean"
            },
            "insecure": {
              "description": "allow connections to SSL registry without certs",
              "type": "boolean"
            },
            "keep-old-files": {
              "description": "do not replace existing files when pulling, treat them as errors",
              "type": "boolean"
            },
            "key-file": {
              "description": "client private key file for the remote registry",
              "type": "string"
            },
            "no-tty": {
              "description": "[Preview] disable progress bars",
              "type": "boolean"
            },
            "oci-layout": {
              "description": "set target as an OCI image layout",
              "type": "boolean"
            },
            "oci-layout-path": {
              "description": "[Experimental] set the path for the OCI image layout target",
              "type": "string"
            },
            "output": {
              "description": "output directory",
              "type": "string"
            },
            "password": {
              "description": "registry password or identity token",
              "type": "string"
            },
            "password-stdin": {
              "description": "read password from stdin",
              "type": "boolean"
            },
            "plain-http": {
              "description": "allow insecure connections to registry without SSL check",
              "type": "boolean"
            },
            "platform": {
              "description": "request platform in the form of `os[/arch][/variant][:os_version]`",
              "type": "string"
            },
            "registry-config": {
              "description": "`path` of the authentication file for registry",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "resolve": {
              "description": "customized DNS for registry, formatted in `host:port:address[:address_port]`",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "template": {
              "description": "[Experimental] template string used to format output",
              "type": "string"
            },
            "username": {
              "description": "registry username",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "flags",
        "args"
      ]
    },
    "name": "oras_pull"
  },
  {
    "annotations": {
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "[Preview] Resolves digest of the target artifact\n\nExample - Resolve digest of the target artifact:\n  oras resolve localhost:5000/hello-world:v1\n",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "description": "Positional arguments\nUsage: [flags] \u003cname\u003e{:\u003ctag\u003e|@\u003cdigest\u003e}",
          "type": "string"
        },
        "flags": {
          "description": "Flag options",
          "properties": {
            "ca-file": {
              "description": "server certificate authority file for the remote registry",
              "type": "string"
            },
            "cert-file": {
              "description": "client certificate file for the remote registry",
              "type": "string"
            },
            "debug": {
              "description": "output debug logs (implies --no-tty)",
              "type": "boolean"
            },
            "full-reference": {
              "description": "print the full artifact reference with digest",
              "type": "boolean"
            },
            "header": {
              "description": "add custom headers to requests",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "identity-token": {
              "description": "registry identity token",
              "type": "string"
            },
            "identity-token-stdin": {
              "description": "read identity token from stdin",
              "type": "boolean"
            },
            "insecure": {
              "description": "allow connections to SSL registry without certs",
              "type": "boolean"
            },
            "key-file": {
              "description": "client private key file for the remote registry",
              "type": "string"
            },
            "oci-layout": {
              "description": "set target as an OCI image layout",
              "type": "boolean"
            },
            "oci-layout-path": {
              "description": "[Experimental] set the path for the OCI image layout target",
              "type": "string"
            },
            "password": {
              "description": "registry password or identity token",
              "type": "string"
            },
            "password-stdin": {
              "description": "read password from stdin",
              "type": "boolean"
            },
            "plain-http": {
              "description": "allow insecure connections to registry without SSL check",
              "type": "boolean"
            },
            "platform": {
              "description": "request platform in the form of `os[/arch][/variant][:os_version]`",
              "type": "string"
            },
            "registry-config": {
              "description": "`path` of the authentication file for registry",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "resolve": {
              "description": "customized DNS for registry, formatted in `host:port:address[:address_port]`",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "username": {
              "description": "registry username",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "flags",
        "args"
      ]
    },
    "name": "oras_resolve"
  },
  {
    "annotations": {
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Show the oras version information\n\nExample - print version:\n  oras version\n",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "description": "Positional arguments",
          "type": "string"
        },
        "flags": {
          "description": "Flag options",
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "flags",
        "args"
      ]
    },
    "name": "oras_version"
  }
]
